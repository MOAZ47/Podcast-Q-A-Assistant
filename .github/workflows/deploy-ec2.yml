# .github/workflows/deploy-ec2.yml

name: Deploy Streamlit App to EC2

on:
  push:
    branches:
      - master # Workflow runs when code is pushed to the 'main' branch
    paths:
      - 'app.py'
      - 'main.py' # If main.py is also part of your Streamlit app logic
      - 'config.py'
      - 'agents/**'
      - 'requirements.txt'
      - 'deploy.sh' # Crucial: Trigger when deploy script changes
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  EC2_USER: ec2-user # Default user for Amazon Linux. For Ubuntu, use 'ubuntu'.
  EC2_HOST: ${{ secrets.EC2_HOST }} # Your EC2 instance's Public IPv4 Address

jobs:
  deploy:
    runs-on: ubuntu-latest # Use a GitHub-hosted runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      # >>>>>>> config.py dynamically generate hoga <<<<<<<
      - name: Generate config.py from GitHub Secrets
        run: |
          # Yeh command config.py file ko banayega ya overwrite karega
          echo "# This file is automatically generated by GitHub Actions for CI/CD purposes." > config.py
          echo "# DO NOT ADD THIS FILE TO GIT." >> config.py
          echo "" >> config.py # Ek khaali line readability ke liye

          # Har API key ke liye ek line add karo jo secrets se value legi
          echo "COHERE_API_KEY = \"${{ secrets.COHERE_API_KEY }}\"" >> config.py
          echo "TAVILY_API_KEY = \"${{ secrets.TAVILY_API_KEY }}\"" >> config.py
          # Agar aur koi sensitive key hai, toh yahan add karo:
          # echo "ANOTHER_API_KEY = \"${{ secrets.ANOTHER_API_KEY }}\"" >> config.py

          # Agar tumhare config.py mein non-sensitive variables bhi hain jo code mein use hote hain,
          # toh unhe bhi yahan add kar sakte ho:
          # echo "DEBUG_MODE = False" >> config.py
        working-directory: ${{ github.workspace }}

      - name: Run tests (Optional but Highly Recommended)
        run: |
          pip install -r requirements.txt
          pip install pytest # Install pytest for running tests
          pytest tests/    # Path to your test directory

      - name: Deploy to EC2 with Dynamic Config file creation
        uses: appleboy/ssh-action@master # A popular action for SSH
        with:
          host: ${{ env.EC2_HOST }}
          username: ${{ env.EC2_USER }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          env: COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}, TAVILY_API_KEY: ${{ secrets.TAVILY_API_KEY }}
          script: |
            # Navigate to the app directory on EC2
            cd /home/${{ env.EC2_USER }}/Podcast-Q-A-Assistant # Replace 'your-repo-name' with your actual repo folder name
            # Run the deployment script on the EC2 instance
            bash deploy.sh

      - name: Verify Deployment (Optional)
        run: |
          echo "Deployment initiated. You can check your app at http://${{ env.EC2_HOST }}:8501"
          # Add a curl command here if you have a simple health check endpoint on your Streamlit app
          # For example: curl -f http://${{ env.EC2_HOST }}:8501 || { echo "Health check failed!"; exit 1; }